# -*- coding: utf-8 -*-
"""IA1_predictive_log.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FqeGGtqOan9ETzxSN47MtJu8ShHjeOv-
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import MinMaxScaler,StandardScaler , LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression , LogisticRegression

from sklearn.metrics import r2_score,mean_squared_error
from sklearn.metrics import accuracy_score , precision_score , recall_score , f1_score

booking = pd.read_csv('/content/booking.csv')
booking

booking.isna().sum()

# 1
booking = booking.dropna()
booking = booking.drop_duplicates()
# removing rows with null and duplicates



# 1
for col in booking.select_dtypes(include = ['int64','float64']).columns:
  mean = booking[col].mean()
  std = booking[col].std()
  maxb = mean + 3*std
  minb = mean - 3*std
  # for i in range(len(booking)):
  if booking[col].max() > maxb:
    print('********************')
    print(col)
    print(maxb ,booking[col].max())
  if booking[col].min()<minb:
    print('********************')
    print(col)
    print(minb,booking[col].min())
# Even though there seem to be outliers they are still accurate data and hence we can use standard scaler

# 2
lbl_enc = LabelEncoder()

for col in booking.select_dtypes(include = ['object']).columns:
  booking[col] = lbl_enc.fit_transform(booking[col])
booking.head()
# Label encoding categorical variables

# 3
booking = booking.drop(columns = ['Booking_ID', 'date of reservation'])
booking.head()
# Booking id and date of reservation are not required in this scenario

X = booking.drop(columns = ['booking status'])
y = booking['booking status']

# 4
X_train , X_test , y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=2)

scaler = StandardScaler()
Xt_scaled = scaler.fit_transform(X_train)
Xtest_scaled = scaler.transform(X_test)

# 5
model = LogisticRegression()
model.fit(Xt_scaled,y_train)
y_pred = model.predict(Xtest_scaled)

# 6
accuracy_s = accuracy_score(y_pred , y_test)
recall = recall_score(y_pred, y_test)
precision = precision_score(y_pred, y_test)

f1_s = f1_score(y_pred , y_test)
print("Accuracy:", accuracy_s)
print("Recall:", recall)
print("Precision:",precision )
print("F1 Score:", f1_s)
# Model accuracy,precision , recall and f1 score are all good

