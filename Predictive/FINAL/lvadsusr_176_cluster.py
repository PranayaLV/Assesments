# -*- coding: utf-8 -*-
"""LVADSUSR_176_cluster.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t42Tr53E52hXH9JiehLXwGBoNBaFYHM0
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import MinMaxScaler,StandardScaler , LabelEncoder
from sklearn.cluster import DBSCAN
from sklearn.ensemble import IsolationForest
from sklearn.model_selection import train_test_split
import warnings
warnings.filterwarnings('ignore')

from numpy import loadtxt

from sklearn.cluster import KMeans

from sklearn.metrics import r2_score,mean_squared_error , silhouette_score
from sklearn.metrics import accuracy_score , precision_score , recall_score , f1_score , confusion_matrix

cust = pd.read_csv('https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch5-Assessment/main/customer_segmentation.csv')
cust.head()

cust.isna().sum()

cust["Income"] = cust['Income'].fillna(cust['Income'].mean())
cust.isna().sum()

cust = cust.drop_duplicates()
cust.shape

cust.info()

cust.describe()

cust = cust[cust.select_dtypes(include = ["int64",'float64']).columns]
cust.drop(columns = ["ID"],inplace = True)
cust.head()

for i in cust.columns:
  sns.boxplot(cust[i])
  plt.title(i)
  plt.show()

for i in cust.columns:
  plt.hist(cust[i])
  plt.title(i)
  plt.show()

# outliers
print(cust.shape)
for col in cust.columns[2:7]:
  q1 = cust[col].quantile(0.25)
  q3 = cust[col].quantile(0.75)
  iqr = q3-q1
  thres = 3
  lower = q1-thres*iqr
  upper = q3+thres*iqr
  mask =  (cust[col] >lower ) & (cust[col] < upper )
  new_df = cust[mask]
print(new_df.shape)

# Removed outliers OUTLIERS

numeric = new_df.columns[2:]
heat = new_df[numeric].corr()

sns.heatmap(heat)

data = new_df.drop(columns = ['Kidhome','NumWebVisitsMonth'])
# dropping low related columns, and redundant columns
data.head()



scaler = MinMaxScaler()
X = scaler.fit_transform(data)
X[:100]

wcss = []

for i in range(1,11):
  model = KMeans(n_clusters = i, random_state = 42)
  model.fit(X)
  wcss.append(model.inertia_)

plt.plot(range(1,11),wcss,marker ='o')
plt.title("Elbow Method")
plt.grid()
plt.xlabel("N Clusters")
plt.ylabel('WCSS')
plt.show()

model = KMeans(n_clusters = 4, random_state = 42)
model.fit(X)
plt.scatter(X[:,1],X[:,6],c=model.labels_)
plt.show()

sil_score = silhouette_score(X, model.labels_)
print("Silhouette Score:",sil_score )