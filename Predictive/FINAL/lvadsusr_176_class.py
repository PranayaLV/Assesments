# -*- coding: utf-8 -*-
"""LVADSUSR_176_class.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hjhMUGVXYQvACrNscJGMYzojKcZ41bbi
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import MinMaxScaler,StandardScaler , LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
import warnings
warnings.filterwarnings('ignore')

from numpy import loadtxt
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score , precision_score , recall_score , f1_score , confusion_matrix

import pandas as pd
peng = pd.read_csv('/content/penguins_classification.csv')
peng.head()

peng.isna().sum()
# no dups

peng = peng.drop_duplicates()
peng.shape

peng.info()

peng['island'] = LabelEncoder().fit_transform(peng['island'])
peng.head()

peng.describe()

for i in peng.columns:
  sns.boxplot(peng[i])
  plt.title(i)
  plt.show()

for i in peng.columns:
  plt.hist(peng[i])
  plt.title(i)
  plt.show()

# outliers
print(peng.shape)
for col in peng.columns[2:6]:
  q1 = peng[col].quantile(0.25)
  q3 = peng[col].quantile(0.75)
  iqr = q3-q1
  lower = q1-1.5*iqr
  upper = q3+1.5*iqr
  mask =  (peng[col] >lower ) & (peng[col] < upper )
  new_df = peng[mask]
print(new_df.shape)

# NO OUTLIERS

numeric = new_df.columns[2:]
heat = new_df[numeric].corr()

sns.heatmap(heat)

data = new_df.drop(columns = ['year','bill_depth_mm'])
# dropping low related columns, and redundant columns
data.head()

data['species'] = LabelEncoder().fit_transform(peng['species'])
data.head()

X = data.drop(columns = ['species'])
y = data["species"]
y.head()

X_train , X_test , y_train , y_test = train_test_split(X,y,test_size = 0.3,random_state=2)

scaler = StandardScaler()
xtrain_s = scaler.fit_transform(X_train)
xtest_s = scaler.transform(X_test)

model = RandomForestClassifier()
model.fit(xtrain_s,y_train)
y_pred = model.predict(xtest_s)
accuracy = accuracy_score(y_test,y_pred)
recall = recall_score(y_test,y_pred)
precision = precision_score(y_test,y_pred)

conf = confusion_matrix(y_test,y_pred)
F1 = f1_score(y_test,y_pred)
print("Accuracy Score: ", accuracy)
print("recall Score: ", recall)
print("precision Score: ", precision)

print("Confusion Matrix: ", conf)

model = LogisticRegression()
model.fit(xtrain_s,y_train)
y_pred = model.predict(xtest_s)
accuracy = accuracy_score(y_test,y_pred)
recall = recall_score(y_test,y_pred)
precision = precision_score(y_test,y_pred)

conf = confusion_matrix(y_test,y_pred)
F1 = f1_score(y_test,y_pred)
print("Accuracy Score: ", accuracy)
print("recall Score: ", recall)
print("precision Score: ", precision)
print("Confusion Matrix: ", conf)

# Logistic reg seems to perform better