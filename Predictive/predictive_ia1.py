# -*- coding: utf-8 -*-
"""Predictive_IA1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/161Kh0DUDyZ_MCtcGXzh1ed1JqRey3kZG
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import MinMaxScaler,StandardScaler , LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression , LogisticRegression

from sklearn.metrics import r2_score,mean_squared_error
from sklearn.metrics import accuracy_score , precision_score , recall_score , f1_score

cost = pd.read_csv('/content/expenses.csv')
cost.head()

cost.isna().sum()

print("Shape" , cost.shape)

# 1
cost1 = cost.dropna()
cost1.isna().sum()
cost = cost1.drop_duplicates()
cost.info()

# 1b
for col in cost.select_dtypes(include = ['int64','float64']).columns:
  mean = cost[col].mean()
  std = cost[col].std()
  maxb = mean + 3*std
  minb = mean - 3*std
  # for i in range(len(cost)):
  if cost[col].max() > maxb:
    print('********************')
    print(col)
    print(maxb ,cost[col].max())
  if cost[col].min()<minb:
    print('********************')
    print(col)
    print(minb,cost[col].min())
# Even though there seem to be outliers they are still accurate data and hence we can use standard scaler

# 2
lbl_enc = LabelEncoder()

cost['sex'] = lbl_enc.fit_transform(cost['sex'])
cost['smoker'] = lbl_enc.fit_transform(cost['smoker'])

cost.head()

cost_p = pd.get_dummies(cost)
cost_p.head()

X = cost_p.drop(columns =['charges'])
y = cost_p['charges']

X.head()

y.head()

X_train , X_test , y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=2)

scaler = StandardScaler()
Xt_scaled = scaler.fit_transform(X_train)
Xtest_scaled = scaler.transform(X_test)

model = LinearRegression()
model.fit(Xt_scaled,y_train)
y_pred = model.predict(Xtest_scaled)

mse = mean_squared_error(y_test,y_pred)
rmse = mean_squared_error(y_test,y_pred,squared=False)
r2 = r2_score(y_test,y_pred)

print("MSE: ",mse)
print("RMSE: ",rmse)
print("R2 Score:",r2)
# R2 Score is good which indicates t=good model performance